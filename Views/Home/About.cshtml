@{
    ViewBag.Title = "About this page";
}
<style>
    dl{
        width:800px;

    }
    dd {
        margin-left: 1.5rem;
        max-width: 100%;
    } 
</style>

<ul>
    <li>@Html.LocalResource("WeatherRain")</li>
</ul>
<div class="jumbotron">
    <h1>このサイトについて</h1>
    <p>
        なかなか技術経歴書やwebテスト・面談などでは表現しきれない部分があります<br />
        だもんで、こんなものを作れますよ的なサイトを公開してみました<br />
        一応一通り、検証を済ませたのですが、バグが沸いたらごめんなさい
    </p>
</div>
<div class="container-lg">
    <hr />
    <dl>
        <dt>・ASP.NET MVC5</dt>
        <dd>
            <p>
                昔の.aspxファイルを使用した、hiddenに山盛り情報を隠しこんだwebページでなく、もう少しパラメータ寄りなすっきりした感じで記述出来ます
            </p>
            <p>
                また、razorが優秀なのでモデルのデータと良く馴染み、ビューヘルパーを自作するとすっきりしたページのソースになります(razorは実行時に展開するインタプリタみたいな物なので)
            </p>
            <p>
                多言語化については、グローバルとローカルに加え部分ビューに対応したビューヘルパーを作成して、レイアウトでの設定を実装しました
            </p>
        </dd>
        <dt>・ASP.NET Identity</dt>
        <dd>
            <p>
                プロジェクト作成時に、認証を行うみたいな設定をすると、かなりの部分を自動で作成してくれます。メールの認証及びログイン二段階認証まで、ひな形を作ってくれました
            </p>
            <p>
                ですがこのひな形、折角ユーザー名とemailのフィールドを用意しているのに、どっちもemailを設定しちゃうようになっているので、もったいないことになっています。(このサイトではちゃんとユーザー名を設定出来るようにしてあります)。
                その影響で、いろんな参考サイトもname=emailでの記述が多く、一部nameとemailがバッティングして動かないサンプルとかあります。ワザとかもしれませんが・・・
            </p>
            <br />
            <p>
                肝心のメール送信の実装は自分で行う必要はありますが、<q>smtpやimapなど</q>いろいろあるので、しょうがないところでしょう。ちなみにこのサイトでは、SendGridとゆ〜azureサーバーお墨付きのsmtpブリッジみたいなものを使っています
            </p>
            <p>
                smsによる、ログイン二段階認証もサポートしているので、そちらも実装はしたのですが、sms送信アカウントは無料利用設定なので、私の電話にしか送れません。したがってデモは目の前で行うことになると思います
            </p>
            <p>
                気になるのは、権限の操作を行うのが<span translate="yes" style="font-size:x-large; color:red;" title="１権限当たり１秒程">異常に重い事</span>です。まぁ、あまり頻繁に行う処理では無いので、問題無しとします
            </p>
        </dd>
        <dt>・Entity Framework Code First</dt>
        <dd>
            <p>
                ざっくり表現すると、モデルを<abbr title="Plain Old CLR Object">POCO</abbr>とゆ〜形式(ぶっちゃけプロパティーだけのクラスです)で先に作って、それをDBに反映させようって感じです。
            </p>
            <p>
                直接テーブルを触らずに、格納データの構成を変更できる上、更新ミスがなくなるのは嬉しいところです。とは言え、テーブル構成の変更は、製造初期ならともかく、例えアジャイルスタイルだったとしても褒められません。なので活躍するのは序盤だけでしょう
            </p>
            <p>
                でもこのコードファースト、認証の機能と相性が悪いので、参考書の通りだと上手く動かないようです。なので本サイトでは、認証機能をコードファーストから隠しています。もしかしたら、やり方が悪いのかも知れませんが
            </p>
            <p>
                また、多対多のリレーションシップの更新は、何故か自動で行えませんでしたので、ちょこっとレガシー技術で逃げました。(参考書や参考サイトの通りに記述しても
                @Html.Ruby("重複","ちょうふく")
                エラーが出てしまいます)<br />
                基本的な設計スタンスは、便利なものは取り込んで、重かったり予想外だったらレガシーで対応としてます。新し物好きなんで(優秀な品ならばですが)
            </p>
        </dd>
    </dl>
    <hr />
    @*<dl>
        <dt>・jQuery</dt>
        <dd>
            また後日記述します
        </dd>
    </dl>*@
</div>
